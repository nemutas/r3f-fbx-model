{"version":3,"sources":["libs/utils.ts","components/Model.tsx","libs/useAnimation.ts","components/YBot.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["publicPath","path","process","Model","fbx","useFBX","ref","fileNames","useState","play","setPlay","all_animations","forEach","name","animations","push","useAnimations","actions","names","datas","useControls","options","start","button","pause","useEffect","reset","fadeIn","fadeOut","action","paused","useAnimation","useMatcapTexture","matcapSurface","matcapJoint","matSurface","THREE","matcap","matJoint","traverse","child","mesh","castShadow","receiveShadow","material","scale","object","dispose","YBot","camera","position","fov","aspect","window","innerWidth","innerHeight","near","far","dpr","devicePixelRatio","shadows","attach","args","Stats","OrbitControls","target","intensity","fallback","rotation","Math","PI","App","style","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAaA,EAAa,SAACC,GAC1B,MAAOC,iBAAyBD,G,QCKpBE,EAAa,WACzB,IAAMC,EAAMC,YAAOL,EAAW,qBACxBM,ECFqB,SAACL,EAAcM,GAC1C,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAwC,GAE9CJ,EAAUK,SAAQ,SAAAC,GAEjB,IAAQC,EAAeT,YAAOL,EAAWC,EAAOY,EAAO,SAA/CC,WAERA,EAAW,GAAGD,KAAOA,EACrBF,EAAeI,KAAKD,EAAW,OAGhC,MAAgCE,YAAcL,GAAtCM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOZ,EAAxB,EAAwBA,IAIlBa,EAAQC,YAAY,CACzBN,WAAY,CAAEO,QAASH,GACvBI,MAAOC,aAAO,kBAAMb,GAAQ,MAC5Bc,MAAOD,aAAO,kBAAMb,GAAQ,QAgB7B,OAbAe,qBAAU,WAAO,IAAD,EAEf,OADA,UAAAR,EAAQE,EAAML,mBAAd,SAA2BY,QAAQC,OAAO,IAAKlB,OACxC,WAAO,IAAD,EACZ,UAAAQ,EAAQE,EAAML,mBAAd,SAA2Bc,QAAQ,IACnClB,GAAQ,MAEP,CAACO,EAASE,EAAML,aAEnBW,qBAAU,WACT,IAAMI,EAASZ,EAAQE,EAAML,YACzBe,IAAQA,EAAOC,QAAUrB,KAC3B,CAACQ,EAASE,EAAML,WAAYL,IAExBH,EDlCKyB,CAAa,WAAY,CAAC,OAAQ,gBAAiB,gBAAiB,kBAEhF,EAAwBC,YAAiB,8BAA+B,KAAjEC,EAAP,oBACA,EAAsBD,YAAiB,8BAA+B,KAA/DE,EAAP,oBAEMC,EAAa,IAAIC,qBAAyB,CAAEC,OAAQJ,IACpDK,EAAW,IAAIF,qBAAyB,CAAEC,OAAQH,IAYxD,OAVA9B,EAAImC,UAAS,SAAAC,GACZ,GAAIA,aAAiBJ,OAAY,CAChC,IAAMK,EAAOD,EACbC,EAAKC,YAAa,EAClBD,EAAKE,eAAgB,EACH,kBAAdF,EAAK5B,KAA0B4B,EAAKG,SAAWT,EAC5B,iBAAdM,EAAK5B,OAAyB4B,EAAKG,SAAWN,OAKxD,uBAAOhC,IAAKA,EAAKuC,MAAO,IAAxB,SACC,2BAAWC,OAAQ1C,EAAK2C,QAAS,UEvBvBC,EAAY,WACxB,OACC,eAAC,IAAD,CACCC,OAAQ,CACPC,SAAU,CAAC,EAAG,IAAK,GACnBC,IAAK,GACLC,OAAQC,OAAOC,WAAaD,OAAOE,YACnCC,KAAM,GACNC,IAAK,KAENC,IAAKL,OAAOM,iBACZC,SAAO,EATR,UAWC,uBAAOC,OAAO,aAAaC,KAAM,CAAC,aAElC,cAACC,EAAA,EAAD,IAEA,cAACC,EAAA,EAAD,CAAeC,OAAQ,CAAC,EAAG,EAAG,KAE9B,8BAAcC,UAAW,KACzB,kCAAkBhB,SAAU,CAAC,EAAG,EAAG,GAAIR,YAAU,EAAC,uBAAsB,KAAM,wBAAuB,OAErG,eAAC,WAAD,CAAUyB,SAAU,KAApB,UACC,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAIR,KAAM,CAAC,EAAG,GAAInB,eAAa,EAAlE,SACC,8CAIF,mCC/BU4B,EAAW,WACvB,OACC,qBAAKC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAtC,SACC,cAAC,EAAD,OCQYC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.a7304360.chunk.js","sourcesContent":["export const publicPath = (path: string) => {\r\n\treturn process.env.PUBLIC_URL + path\r\n}\r\n","import React, { VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useFBX, useMatcapTexture } from '@react-three/drei';\r\nimport { useAnimation } from '../libs/useAnimation';\r\nimport { publicPath } from '../libs/utils';\r\n\r\nexport const Model: VFC = () => {\r\n\tconst fbx = useFBX(publicPath('/assets/ybot.fbx'))\r\n\tconst ref = useAnimation('/assets/', ['ybot', 'belly_dancing', 'samba_dancing', 'goofy_running'])\r\n\r\n\tconst [matcapSurface] = useMatcapTexture('F75F0B_461604_9A3004_FB9D2F', 512)\r\n\tconst [matcapJoint] = useMatcapTexture('28292A_D3DAE5_A3ACB8_818183', 512)\r\n\r\n\tconst matSurface = new THREE.MeshMatcapMaterial({ matcap: matcapSurface })\r\n\tconst matJoint = new THREE.MeshMatcapMaterial({ matcap: matcapJoint })\r\n\r\n\tfbx.traverse(child => {\r\n\t\tif (child instanceof THREE.Mesh) {\r\n\t\t\tconst mesh = child as THREE.Mesh\r\n\t\t\tmesh.castShadow = true\r\n\t\t\tmesh.receiveShadow = true\r\n\t\t\tif (mesh.name === 'Alpha_Surface') mesh.material = matSurface\r\n\t\t\telse if (mesh.name === 'Alpha_Joints') mesh.material = matJoint\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<group ref={ref} scale={0.01}>\r\n\t\t\t<primitive object={fbx} dispose={null} />\r\n\t\t</group>\r\n\t)\r\n}\r\n","import { button, useControls } from 'leva';\r\nimport { useEffect, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useAnimations, useFBX } from '@react-three/drei';\r\nimport { publicPath } from './utils';\r\n\r\nexport const useAnimation = (path: string, fileNames: string[]) => {\r\n\tconst [play, setPlay] = useState(true)\r\n\r\n\tconst all_animations: THREE.AnimationClip[] = []\r\n\r\n\tfileNames.forEach(name => {\r\n\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\r\n\t\tconst { animations } = useFBX(publicPath(path + name + '.fbx'))\r\n\t\t// rename action name\r\n\t\tanimations[0].name = name\r\n\t\tall_animations.push(animations[0])\r\n\t})\r\n\r\n\tconst { actions, names, ref } = useAnimations(all_animations)\r\n\t// console.log(names)\r\n\r\n\t// controller\r\n\tconst datas = useControls({\r\n\t\tanimations: { options: names },\r\n\t\tstart: button(() => setPlay(true)),\r\n\t\tpause: button(() => setPlay(false))\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tactions[datas.animations]?.reset().fadeIn(0.5).play()\r\n\t\treturn () => {\r\n\t\t\tactions[datas.animations]?.fadeOut(0.5)\r\n\t\t\tsetPlay(true)\r\n\t\t}\r\n\t}, [actions, datas.animations])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst action = actions[datas.animations]\r\n\t\tif (action) action.paused = !play\r\n\t}, [actions, datas.animations, play])\r\n\r\n\treturn ref\r\n}\r\n","import React, { Suspense, VFC } from 'react';\r\nimport { OrbitControls, Plane, Stats } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Model } from './Model';\r\n\r\nexport const YBot: VFC = () => {\r\n\treturn (\r\n\t\t<Canvas\r\n\t\t\tcamera={{\r\n\t\t\t\tposition: [0, 1.5, 3],\r\n\t\t\t\tfov: 50,\r\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\r\n\t\t\t\tnear: 0.1,\r\n\t\t\t\tfar: 2000\r\n\t\t\t}}\r\n\t\t\tdpr={window.devicePixelRatio}\r\n\t\t\tshadows>\r\n\t\t\t{/* canvas color */}\r\n\t\t\t<color attach=\"background\" args={['#1e1e1e']} />\r\n\t\t\t{/* fps */}\r\n\t\t\t<Stats />\r\n\t\t\t{/* camera controller */}\r\n\t\t\t<OrbitControls target={[0, 1, 0]} />\r\n\t\t\t{/* lights */}\r\n\t\t\t<ambientLight intensity={0.1} />\r\n\t\t\t<directionalLight position={[5, 5, 5]} castShadow shadow-mapSize-width={2048} shadow-mapSize-height={2048} />\r\n\t\t\t{/* objects */}\r\n\t\t\t<Suspense fallback={null}>\r\n\t\t\t\t<Model />\r\n\t\t\t\t<Plane rotation={[-Math.PI / 2, 0, 0]} args={[5, 5]} receiveShadow>\r\n\t\t\t\t\t<meshStandardMaterial />\r\n\t\t\t\t</Plane>\r\n\t\t\t</Suspense>\r\n\t\t\t{/* helper */}\r\n\t\t\t<axesHelper />\r\n\t\t</Canvas>\r\n\t)\r\n}\r\n","import React, { VFC } from 'react';\nimport { YBot } from './components/YBot';\n\nexport const App: VFC = () => {\n\treturn (\n\t\t<div style={{ width: '100vw', height: '100vh' }}>\n\t\t\t<YBot />\n\t\t</div>\n\t)\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}